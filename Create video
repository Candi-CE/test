#include <opencv2/imgcodecs.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/core.hpp>
#include <iostream>
#include <math.h>
using namespace std;
using namespace cv;

void myROI(Mat img) {
	int lineType = LINE_8;

	//define 4 points of polygon mask
	Point mask[1][4];
	mask[0][0] = Point(5, 540);
	mask[0][1] = Point(960, 540);
	mask[0][2] = Point(820, 300);
	mask[0][3] = Point(300, 300);

	//fill polygon with white color
	const Point* ppt[1] = { mask[0] };
	int npt[] = { 4 };
	fillPoly(img,
		ppt,
		npt,
		1,
		Scalar(255, 255, 255),
		lineType);
}

Mat HoughlineDraw(Mat edges, Mat src) {

	vector<Vec4i> linesP;											// will hold the results of the detection
	HoughLinesP(edges, linesP, 1, CV_PI / 180, 50, 50, 10);			// runs the actual detection

	// Draw the lines
	for (size_t i = 0; i < linesP.size(); i++)
	{
		Vec4i l = linesP[i];
		line(src, Point(l[0], l[1]), Point(l[2], l[3]), Scalar(0, 0, 255), 3, LINE_AA);
	}
	imshow("Detected Lines (in red)", src);
	return src;
}
//////////Draw in countours/
// 
// 
// 
// 

void DrawinContours(Mat ImgResized, Mat FreshImg) {
	
	vector<vector<Point> > contours;
	vector<Vec4i> hierarchy;
	findContours(FreshImg, contours, hierarchy, RETR_TREE, CHAIN_APPROX_SIMPLE);
	Mat drawing = ImgResized;
	for (size_t i = 0; i < contours.size(); i++)
	{
		int cvi = arcLength(contours[i], true);
		double dt = contourArea(contours[i]);
		if (cvi < 20 || dt < 5) {
			contours.erase(contours.begin() + i); i--;
		}
	}
	
	///////////////////
	for (size_t i = 0; i < contours.size(); i++)
	{
		Scalar color = Scalar(0, 0, 255);
		drawContours(drawing, contours, (int)i, color, 2, LINE_8, hierarchy, 0);
	}
	//unsigned int s = contours.size();
	vector<Point2f> points;
	for (size_t i = 0; i < contours.size(); i++)
	{
		//Tim moment de tim trong tam
		Moments m = moments(contours[i]);
		//Tim trong tam
		Point2f centrois = Point2f(m.m10 / m.m00, m.m01 / m.m00);
		points.push_back(centrois);

	}
	
	for (size_t i = 0; i < points.size()-1; i++)
	{
		cout << "Diem " << i << ": x = " << points[i].x << ", y = " << points[i].y << endl;
		if(sqrt(pow(points[i].x - points[i+1].x, 2) + pow(points[i].y - points[i+1].y, 2) * 1.0)<5)
			line(drawing, points[i], points[i + 1], Scalar(0, 0, 255), 3, LINE_AA);
	}
	imshow("contour",drawing);

}
// 
// 
// 
// 
// 
// 
////////////////////////////
int main() {


	//Import video
	const String filename = "C:\\Users\\letho\\Videos\\ride.mov";
	VideoCapture cap(filename);
	//Create file video
	VideoWriter video("C:\\Users\\letho\\Videos\\out.avi", cv::VideoWriter::fourcc('M', 'J', 'P', 'G'), 30, Size(960, 540));
	if (!cap.isOpened())
	{
		cout << "Could not open video stream." << endl;
		return 1;
	}
	Mat img;
	while (true) {

		//Read  each image
		cap.read(img);
		if (img.empty()) break;//When this happens we've reached the end
		
		//resize img to qHD (960x540)
		Mat ImgResized;
		resize(img, ImgResized, Size(960, 540));

		//convert ResizedImg to 1-channel color (Gray)
		Mat GrayImg;
		cvtColor(ImgResized, GrayImg, COLOR_BGR2GRAY);		
		//Blur Image using Gaussian algorithm
		Mat BlurImg;
		GaussianBlur(GrayImg, BlurImg, Size(5, 5), 10);
		//Raw Edge-detection with Canny algorithm
		Mat edgesImg;
		Canny(BlurImg, edgesImg, 10, 128);

		//Create mask to define ROI
		Mat mask = Mat::zeros(540, 960, CV_8UC1);
		myROI(mask);

		//apply Mask on Edge-detected Image
		Mat FreshImg;
		bitwise_and(edgesImg, mask, FreshImg);
		Mat img1 = FreshImg(Range(0, 540), Range(0, 400));
	//	DrawinContours(ImgResized, img1);
		//draw the road line to Image using Probabilistic Hough Line Transform
		
		Mat src =HoughlineDraw(FreshImg, ImgResized);

		//display
		
		imshow("Original_Gray_Img", GrayImg);
		imshow("After_Masked_Img", FreshImg);
		imshow("Mask", mask);
		imshow("Edge_Detected_Img", edgesImg);
//
		//Create video
		video.write(src);
		
		// Press  ESC on keyboard to  exit
		char c = (char)waitKey(1);
		if (c == 27)
			break;
	}









	//import image from resource to 'img'
//	string path = "C:\\Users\\letho\\OneDrive\\Pictures\\New folder\\0.jpg";

	cap.release();

	// Closes all the frames
	destroyAllWindows();

	waitKey(0);
	return 0;

}
